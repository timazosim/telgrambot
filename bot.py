import os
import json
import time
import random
from datetime import datetime
from telegram import Update, ParseMode
from telegram.ext import Updater, MessageHandler, Filters, CallbackContext
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
from pyowm import OWM
import wikipediaapi
import pyjokes
import emoji
import nltk
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("7756341764:AAH65M7ZKAU2mWk-OFerfu5own6QMgkM574")
if not TOKEN:
    TOKEN = "7756341764:AAH65M7ZKAU2mWk-OFerfu5own6QMgkM574"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    logger.warning("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ).")

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–¥–µ.")
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ö–ª—é—á –¥–ª—è OpenWeatherMap
OWM_API_KEY = "your_openweathermap_key_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
owm = OWM(OWM_API_KEY) if OWM_API_KEY != "your_openweathermap_key_here" else None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATA_FILE = "bot_data.json"
RATE_LIMIT = 10
user_timestamps = {}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
FALLBACK_RESPONSES = [
    "–û–≥–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç? üòä",
    "–•–º, —Ç—ã –º–µ–Ω—è –æ–∑–∞–¥–∞—á–∏–ª! –ú–æ–∂–µ—Ç, —É—Ç–æ—á–Ω–∏—à—å? ü§î",
    "–ù–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç –∏–ª–∏ —à—É—Ç–∫—É! üòÑ",
    "–ö–∞–∂–µ—Ç—Å—è, –º–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–∞–¥–∞—Ä —Å–ø–∏—Ç! –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üöÄ",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
wiki = wikipediaapi.Wikipedia("ua")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NLTK
nltk.download('punkt', quiet=True)
nltk.download('vader_lexicon', quiet=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {"users": {}}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"users": {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_rate_limit(user_id):
    now = time.time()
    if user_id not in user_timestamps:
        user_timestamps[user_id] = []
    user_timestamps[user_id] = [t for t in user_timestamps[user_id] if now - t < 60]
    if len(user_timestamps[user_id]) >= RATE_LIMIT:
        return False
    user_timestamps[user_id].append(now)
    return True

# –í–µ–±-–ø–∞—Ä—Å–∏–Ω–≥
def search_web(query):
    try:
        url = f"https://www.qwant.com/?q={query}&t=web"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=5)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        results = soup.find_all("div", class_="result__body")
        if results:
            return results[0].get_text(strip=True)[:200]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        return None

# –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
def search_wikipedia(query):
    try:
        page = wiki.page(query)
        if page.exists():
            return page.summary[:200]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def get_weather(city):
    if not owm:
        return "–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –∑–∞–¥–∞–π—Ç–µ OWM_API_KEY."
    try:
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place(city)
        w = observation.weather
        temp = w.temperature("celsius")["temp"]
        status = w.detailed_status
        return f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {status} {emoji.emojize(':sun:') if 'sun' in status else emoji.emojize(':cloud:')}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è {city}."

# –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
def analyze_sentiment(text):
    try:
        blob = TextBlob(text)
        sentiment = blob.sentiment.polarity
        if sentiment > 0.1:
            return "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π üòä", sentiment
        elif sentiment < -0.1:
            return "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π üòî", sentiment
        else:
            return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üòê", sentiment
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ü§∑", 0

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, to_lang="ru"):
    try:
        blob = TextBlob(text)
        return str(blob.translate(to=to_lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# –ü–æ–ª—É—á–µ–Ω–∏–µ —à—É—Ç–∫–∏
def get_joke():
    try:
        return pyjokes.get_joke(language="en", category="neutral")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à—É—Ç–∫–∏: {e}")
        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É, –Ω–æ –≤–æ—Ç —É–ª—ã–±–∫–∞: üòÑ"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞
def get_fact():
    try:
        return facts.get_fact()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–∫—Ç–∞: {e}")
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –ó–µ–º–ª—è –∫—Ä—É–≥–ª–∞—è! üåç"

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
def extract_keywords(text):
    try:
        tokens = nltk.word_tokenize(text.lower())
        return [word for word in tokens if word.isalnum() and len(word) > 3]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        return [text.lower()]

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
def classify_intent(text):
    text_lower = text.lower()
    
    # –ü–æ–≥–æ–¥–∞
    if re.search(r"\b(–ø–æ–≥–æ–¥–∞|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–≥—Ä–∞–¥—É—Å|–ø—Ä–æ–≥–Ω–æ–∑)\b", text_lower):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        tokens = nltk.word_tokenize(text_lower)
        cities = [t.capitalize() for t in tokens if t.isalpha() and t not in ["–ø–æ–≥–æ–¥–∞", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∫–∞–∫–∞—è", "–≤"]]
        city = cities[0] if cities else "Moscow"
        return "weather", city
    
    # –®—É—Ç–∫–∞
    if re.search(r"\b(—à—É—Ç–∫–∞|–ø–æ—Å–º–µ—è—Ç—å—Å—è|–∞–Ω–µ–∫–¥–æ—Ç|—Å–º–µ—à–Ω–æ)\b", text_lower):
        return "joke", None
    
    # –§–∞–∫—Ç
    if re.search(r"\b(—Ñ–∞–∫—Ç|–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ|–∑–Ω–∞–ª)\b", text_lower):
        return "fact", None
    
    # –ò—Å—Ç–æ—Ä–∏—è
    if re.search(r"\b(–∏—Å—Ç–æ—Ä–∏—è|–ø—Ä–æ—à–ª—ã–µ|–≤–æ–ø—Ä–æ—Å—ã)\b", text_lower):
        return "history", None
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if re.search(r"\b(–æ—á–∏—Å—Ç–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–∏—Å—Ç–æ—Ä–∏—é)\b", text_lower):
        return "clear", None
    
    # –í–æ–ø—Ä–æ—Å (–ø–æ–∏—Å–∫)
    if re.search(r"\b(—á—Ç–æ|–∫—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∫–∞–∫|–∑–∞—á–µ–º)\b", text_lower):
        return "search", text_lower
    
    # –û–±—â–∏–π –ø–æ–∏—Å–∫
    return "search", text_lower

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user_message = update.message.text.strip()
    
    if not check_rate_limit(user_id):
        update.message.reply_text(emoji.emojize("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É. :hourglass:"), parse_mode=ParseMode.MARKDOWN)
        return
    
    data = load_data()
    if user_id not in data["users"]:
        data["users"][user_id] = []
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not data["users"][user_id] and "–ø—Ä–∏–≤–µ—Ç" in user_message.lower():
        update.message.reply_text(
            emoji.emojize(
                f"–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç! :robot:\n"
                "–°–ø—Ä–∞—à–∏–≤–∞–π –æ –ø–æ–≥–æ–¥–µ, —Ñ–∞–∫—Ç–∞—Ö, —à—É—Ç–∏, –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî —è –≤—Å—ë —É–º–µ—é!\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?', '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É', '–ß—Ç–æ —Ç–∞–∫–æ–µ Python?'"
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    for entry in data["users"][user_id]:
        if entry["question"].lower() == user_message.lower():
            update.message.reply_text(emoji.emojize(f"–Ø —É–∂–µ –æ—Ç–≤–µ—á–∞–ª: {entry['answer']} :repeat:"), parse_mode=ParseMode.MARKDOWN)
            return
    
    # –ü–µ—Ä–µ–≤–æ–¥
    translated_message = translate_text(user_message, to_lang="ru")
    if translated_message != user_message:
        logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {user_message} -> {translated_message}")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = extract_keywords(translated_message)
    query = " ".join(keywords) if keywords else translated_message
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    sentiment, score = analyze_sentiment(user_message)
    sentiment_response = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {sentiment} (–æ—Ü–µ–Ω–∫–∞: {score:.2f})"
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    intent, param = classify_intent(translated_message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    answer = None
    source = None
    
    if intent == "weather":
        answer = get_weather(param)
        source = "–ü–æ–≥–æ–¥–∞"
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã: {param}")
    
    elif intent == "joke":
        answer = get_joke()
        source = "–®—É—Ç–∫–∞"
        logger.info("–ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏")
    
    elif intent == "fact":
        answer = get_fact()
        source = "–§–∞–∫—Ç"
        logger.info("–ó–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–∞")
    
    elif intent == "history":
        if user_id not in data["users"] or not data["users"][user_id]:
            answer = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å."
            source = "–ò—Å—Ç–æ—Ä–∏—è"
        else:
            response = emoji.emojize("*–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:*\n:history:")
            for entry in data["users"][user_id][-5:]:
                timestamp = entry.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                question = entry["question"]
                ans = entry["answer"]
                response += f"_{timestamp}_\n*–í–æ–ø—Ä–æ—Å:* {question}\n*–û—Ç–≤–µ—Ç:* {ans}\n\n"
            answer = response
            source = "–ò—Å—Ç–æ—Ä–∏—è"
        logger.info("–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏")
    
    elif intent == "clear":
        if user_id in data["users"]:
            data["users"][user_id] = []
            save_data(data)
            answer = "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!"
            source = "–û—á–∏—Å—Ç–∫–∞"
        else:
            answer = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏."
            source = "–û—á–∏—Å—Ç–∫–∞"
        logger.info("–ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
    
    elif intent == "search":
        # –í–∏–∫–∏–ø–µ–¥–∏—è
        answer = search_wikipedia(query)
        if answer:
            source = "–í–∏–∫–∏–ø–µ–¥–∏—è"
            logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏")
        
        # –í–µ–±-–ø–æ–∏—Å–∫
        if not answer:
            answer = search_web(query)
            if answer:
                source = "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç"
                logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
        
        # –§–∞–∫—Ç –∏–ª–∏ —à—É—Ç–∫–∞
        if not answer:
            if random.random() < 0.5:
                answer = get_fact()
                source = "–§–∞–∫—Ç"
            else:
                answer = get_joke()
                source = "–®—É—Ç–∫–∞"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    final_answer = f"{sentiment_response}\n*{source}:* {answer}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data["users"][user_id].append({
        "question": user_message,
        "answer": final_answer,
        "timestamp": timestamp
    })
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    update.message.reply_text(emoji.emojize(final_answer), parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        update.message.reply_text(emoji.emojize("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. :warning:"), parse_mode=ParseMode.MARKDOWN)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dp.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
