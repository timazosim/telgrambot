import os
import json
import time
from datetime import datetime
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests
import wikipedia
import pyjokes
from googlesearch import search
import logging
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("7756341764:AAH65M7ZKAU2mWk-OFerfu5own6QMgkM574")
if not TOKEN:
    TOKEN = "7756341764:AAH65M7ZKAU2mWk-OFerfu5own6QMgkM574"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    logger.warning("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–¥–∞ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ).")

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–¥–µ.")
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATA_FILE = "bot_data.json"
RATE_LIMIT = 10  # –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_timestamps = {}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
FALLBACK_RESPONSES = [
    "–•–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å? üòä",
    "–ö–∞–∂–µ—Ç—Å—è, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–æ–ª—á–∏—Ç! –£—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –ø—Ä–æ —à—É—Ç–∫—É!",
    "–û–≥–æ, —Ç—ã –º–µ–Ω—è –æ–∑–∞–¥–∞—á–∏–ª! –ú–æ–∂–µ—Ç, —è –Ω–∞–π–¥—É –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ?",
    "–£–ø—Å, –º–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å—Å—è–∫–ª–∏! üòÑ –•–æ—á–µ—à—å —à—É—Ç–∫—É –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞?",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
wikipedia.set_lang("ru")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {"users": {}}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"users": {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_rate_limit(user_id):
    now = time.time()
    if user_id not in user_timestamps:
        user_timestamps[user_id] = []
    user_timestamps[user_id] = [t for t in user_timestamps[user_id] if now - t < 60]
    if len(user_timestamps[user_id]) >= RATE_LIMIT:
        return False
    user_timestamps[user_id].append(now)
    return True

# –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Search
def search_google(query):
    try:
        for result in search(query, num_results=1, lang="ru", pause=2.0):
            return result
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Search: {e}")
        return None

# –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI
def search_newsapi(query):
    if NEWSAPI_KEY == "your_newsapi_key_here":
        return None
    try:
        url = "https://newsapi.org/v2/everything"
        params = {"q": query, "apiKey": NEWSAPI_KEY, "language": "ru", "pageSize": 1}
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        data = response.json()
        if data.get("articles"):
            return data["articles"][0].get("description", None)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ NewsAPI: {e}")
        return None

# –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
def search_wikipedia(query):
    try:
        summary = wikipedia.summary(query, sentences=2)
        return summary
    except wikipedia.exceptions.DisambiguationError as e:
        return f"–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(e.options[:3])}"
    except wikipedia.exceptions.PageError:
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏: {e}")
        return None

# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, to_lang="ru"):
    try:
        translated = translator.translate(text, dest=to_lang)
        return translated.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# –ü–æ–ª—É—á–µ–Ω–∏–µ —à—É—Ç–∫–∏
def get_joke():
    try:
        joke = pyjokes.get_joke(language="en", category="neutral")
        return translate_text(joke, to_lang="ru")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à—É—Ç–∫–∏: {e}")
        return "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É, –Ω–æ –≤–æ—Ç —É–ª—ã–±–∫–∞: üòÑ"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def get_fallback_response():
    return random.choice(FALLBACK_RESPONSES)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –±–æ—Ç! üòÑ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –Ω–æ–≤–æ—Å—Ç–∏, "
        "—à—É—á—É –∏ –ø–µ—Ä–µ–≤–æ–∂—É. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /start, /history, /clear, /joke",
        parse_mode=ParseMode.MARKDOWN
    )

# –ö–æ–º–∞–Ω–¥–∞ /history
def history(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    data = load_data()
    
    if user_id not in data["users"] or not data["users"][user_id]:
        update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞! –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å.", parse_mode=ParseMode.MARKDOWN)
        return
    
    response = "*–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
    for entry in data["users"][user_id][-5:]:
        timestamp = entry.get("timestamp", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        question = entry["question"]
        answer = entry["answer"]
        response += f"_{timestamp}_\n*–í–æ–ø—Ä–æ—Å:* {question}\n*–û—Ç–≤–µ—Ç:* {answer}\n\n"
    
    update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /clear
def clear(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    data = load_data()
    
    if user_id in data["users"]:
        data["users"][user_id] = []
        save_data(data)
        update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!", parse_mode=ParseMode.MARKDOWN)
    else:
        update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /joke
def joke(update: Update, context: CallbackContext):
    joke_text = get_joke()
    update.message.reply_text(f"–í–æ—Ç —Ç–µ–±–µ —à—É—Ç–∫–∞: {joke_text}", parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user_message = update.message.text.strip()
    
    if not check_rate_limit(user_id):
        update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É.", parse_mode=ParseMode.MARKDOWN)
        return
    
    data = load_data()
    if user_id not in data["users"]:
        data["users"][user_id] = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    for entry in data["users"][user_id]:
        if entry["question"].lower() == user_message.lower():
            update.message.reply_text(f"–Ø —É–∂–µ –æ—Ç–≤–µ—á–∞–ª: {entry['answer']}", parse_mode=ParseMode.MARKDOWN)
            return
    
    # –ü–µ—Ä–µ–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
    translated_message = translate_text(user_message, to_lang="ru")
    if translated_message != user_message:
        logger.info(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {user_message} -> {translated_message}")
    
    # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞
    answer = None
    source = None
    
    # 1. Google Search
    answer = search_google(translated_message)
    if answer:
        source = "Google"
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Google Search")
    
    # 2. NewsAPI
    if not answer:
        answer = search_newsapi(translated_message)
        if answer:
            source = "–ù–æ–≤–æ—Å—Ç–∏"
            logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ NewsAPI")
    
    # 3. –í–∏–∫–∏–ø–µ–¥–∏—è
    if not answer:
        answer = search_wikipedia(translated_message)
        if answer:
            source = "–í–∏–∫–∏–ø–µ–¥–∏—è"
            logger.info("–û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏")
    
    # 4. –®—É—Ç–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if not answer:
        if random.random() < 0.5:
            answer = f"–ù–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –≤–æ—Ç —à—É—Ç–∫–∞: {get_joke()}"
            source = "–®—É—Ç–∫–∞"
        else:
            answer = get_fallback_response()
            source = "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    final_answer = f"*{source}:* {answer}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data["users"][user_id].append({
        "question": user_message,
        "answer": final_answer,
        "timestamp": timestamp
    })
    save_data(data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    update.message.reply_text(final_answer, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", parse_mode=ParseMode.MARKDOWN)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("history", history))
        dp.add_handler(CommandHandler("clear", clear))
        dp.add_handler(CommandHandler("joke", joke))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dp.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
